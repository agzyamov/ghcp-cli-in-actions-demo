name: Copilot Feature Development

on:
  workflow_dispatch:
    inputs:
      feature_prompt:
        description: 'Feature description for Copilot (e.g., "Create a function to calculate Fibonacci numbers")'
        required: true
        type: string

jobs:
  copilot-feature:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-node@v4
        with:
          node-version: '22'
      
      - name: Install Copilot CLI
        run: |
          npm install -g @github/copilot
          npx @github/copilot --version
      
      - name: Create Feature Branch
        run: |
          BRANCH_NAME="feature/copilot-$(date +%s)"
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV
          
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          git checkout -b "$BRANCH_NAME"
          echo "✅ Created branch: $BRANCH_NAME"
      
      - name: Determine File Path and Language
        run: |
          # Generate Python filename from prompt
          TIMESTAMP=$(date +%s)
          PROMPT="${{ github.event.inputs.feature_prompt }}"
          
          # Generate filename from prompt (lowercase, replace spaces with underscores)
          FILENAME=$(echo "$PROMPT" | head -c 50 | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9]/_/g' | sed 's/__*/_/g' | sed 's/^_//;s/_$//')
          FILE_PATH="generated/${FILENAME}_${TIMESTAMP}.py"
          
          echo "FILE_PATH=$FILE_PATH" >> $GITHUB_ENV
          echo "✅ Will create: $FILE_PATH"
      
      - name: Generate Code with Copilot
        env:
          GITHUB_TOKEN: ${{ secrets.COPILOT_TOKEN || secrets.GITHUB_TOKEN }}
          GH_TOKEN: ${{ secrets.COPILOT_TOKEN || secrets.GITHUB_TOKEN }}
        run: |
          export GITHUB_TOKEN="${GITHUB_TOKEN}"
          export GH_TOKEN="${GH_TOKEN}"
          
          if [ -z "$GITHUB_TOKEN" ]; then
            echo "❌ ERROR: No COPILOT_TOKEN secret found!"
            exit 1
          fi
          
          echo "=== Generating code with Copilot ==="
          echo "Feature: ${{ github.event.inputs.feature_prompt }}"
          echo "File: $FILE_PATH"
          echo ""
          
          # Ask Copilot to generate code
          GITHUB_TOKEN="${GITHUB_TOKEN}" GH_TOKEN="${GH_TOKEN}" npx @github/copilot \
            --allow-all-tools \
            -p "${{ github.event.inputs.feature_prompt }}. Write complete, production-ready Python code with comments, error handling, and tests if applicable. Output ONLY the code in a markdown code block for python." \
            > copilot_response.txt 2>&1
          
          echo ""
          echo "=== Copilot Response ==="
          cat copilot_response.txt
      
      - name: Extract and Save Code
        run: |
          # Create directory if needed
          mkdir -p "$(dirname "$FILE_PATH")"
          
          # Extract code from markdown code blocks
          # Try with python language marker
          sed -n '/```python/,/```/p' copilot_response.txt | sed '1d;$d' > "$FILE_PATH" 2>/dev/null || true
          
          # Try without language specifier
          if [ ! -s "$FILE_PATH" ]; then
            sed -n '/```/,/```/p' copilot_response.txt | sed '1d;$d' > "$FILE_PATH" 2>/dev/null || true
          fi
          
          # Remove leading whitespace
          if [ -s "$FILE_PATH" ]; then
            sed -i 's/^[[:space:]]*//' "$FILE_PATH"
          fi
          
          # If still empty, create a placeholder
          if [ ! -s "$FILE_PATH" ]; then
            echo "❌ Could not extract code from Copilot response"
            echo "# Generated by GitHub Copilot" > "$FILE_PATH"
            echo "# TODO: Review and complete implementation" >> "$FILE_PATH"
            echo "" >> "$FILE_PATH"
            cat copilot_response.txt >> "$FILE_PATH"
          fi
          
          echo ""
          echo "=== Generated File: $FILE_PATH ==="
          cat "$FILE_PATH"
      
      - name: Commit Changes
        run: |
          git add "$FILE_PATH" copilot_response.txt
          
          git commit -m "feat: ${{ github.event.inputs.feature_prompt }}" \
            -m "Generated by GitHub Copilot CLI" \
            -m "File: $FILE_PATH"
          
          echo "✅ Changes committed"
      
      - name: Push Branch
        run: |
          git push origin "$BRANCH_NAME"
          echo "✅ Branch pushed: $BRANCH_NAME"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Create Pull Request
        env:
          FEATURE_PROMPT: ${{ github.event.inputs.feature_prompt }}
          SERVER_URL: ${{ github.server_url }}
          REPOSITORY: ${{ github.repository }}
          RUN_ID: ${{ github.run_id }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          {
            echo "## 🤖 AI-Generated Feature"
            echo ""
            echo "Prompt: ${FEATURE_PROMPT}"
            echo ""
            echo "File: \`${FILE_PATH}\`"
            echo ""
            echo "Generated by: GitHub Copilot CLI in GitHub Actions"
            echo ""
            echo "Workflow Run: ${SERVER_URL}/${REPOSITORY}/actions/runs/${RUN_ID}"
            echo ""
            echo "Please review the generated code carefully before merging:"
            echo "- Verify functionality and logic"
            echo "- Check for security issues"
            echo "- Ensure code quality and style"
            echo "- Add or update tests if needed"
          } > pr_body.md
          
          gh pr create \
            --title "feat: ${FEATURE_PROMPT}" \
            --body-file pr_body.md \
            --base main \
            --head "$BRANCH_NAME" \
            --label "ai-generated" \
            --label "needs-review"
          
          echo "✅ Pull request created"
      
      - name: Summary
        run: |
          echo "## ✅ Feature Development Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Feature:** ${{ github.event.inputs.feature_prompt }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** \`$BRANCH_NAME\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**File:** \`$FILE_PATH\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "A pull request has been created for review." >> $GITHUB_STEP_SUMMARY
